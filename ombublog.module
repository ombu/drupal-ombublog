<?php

/**
 * @file
 * OMBU Blog Module
 *
 * Provides single-blog functionality for a drupal site. Features include:
 *   - Tags, tagging via taxonomy
 *   - Blog-only search
 */

include_once 'ombublog.features.inc';

/**
 * Constants
 */

/**
 * Base url stem for blog functionality
 */
define('OMBUBLOG_BASE_PATH', 'blog');

/**
 * Module Hooks
 */

/**
 * Implements hook_menu().
 */
function ombublog_menu() {
  $items = array();

  $items['admin/config/user-interface/ombublog'] = array(
    'title' => 'Ombu Blog',
    'description' => 'Configuration for sitewide blog',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ombublog_settings_form'),
    'access arguments' => array('administer ombublog'),
    'file' => 'ombublog.admin.inc',
  );

  $items[OMBUBLOG_BASE_PATH . '/%/search'] = array(
    'title' => 'Blog',
    'page callback' => 'ombublog_search_view',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_bean_types_api_info().
 */
function ombublog_bean_types_api_info() {
  return array(
    'api' => bean_current_version(),
  );
}

/**
 * Implements hook_bean_types().
 */
function ombublog_bean_types() {
  $plugins = array();

  $plugins['ombublog_list'] = array(
    'name' => 'ombublog_list',
    'label' => t('Latest Blog Posts'),
    'handler' => array(
      'class' => 'OmbublogList',
      'parent' => 'bean_default',
    ),
    'path' => drupal_get_path('module', 'ombublog') . '/includes',
    'file' => 'OmbublogList.php',
    'editable' => TRUE,
  );

  return $plugins;
}

/**
 * Implements hook_bean_style_info().
 */
function ombublog_bean_style_info() {
  return array(
    'ombublog_list' => array(
      'label' => 'Teaser listing',
      'class' => 'OmbublogListStyle',
      'bean_types' => array(
        'ombublog_list',
      ),
    ),
  );
}

/**
 * Implements hook_bean_style_options_alter().
 */
function ombublog_bean_style_options_alter(&$options, $context) {
  if ($context['bundle'] == 'ombublog_list') {
    unset($options['']);
  }
}

/**
 * Implements hook_theme().
 */
function ombublog_theme() {
  return array(
    'taxonomy_comma_list' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_permissions().
 */
function ombublog_permissions() {
  return array(
    'administer ombublogs' => array(
      'title' => t('Administer Blogs'),
    ),
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function ombublog_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['ombublog'];
    unset($implementations['ombublog']);
    $implementations['ombublog'] = $group;
  }
}

/**
 * Implements hook_image_default_styles().
 */
function ombublog_image_default_styles() {
  $styles = array();

  $styles['blog_teaser'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 251, 'height' => 134, 'upscale' => 0),
        'weight' => 0,
      ),
    ),
  );

  $styles['blog_post'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 408, 'height' => 300, 'upscale' => 0),
        'weight' => 0,
      ),
    ),
  );
  return $styles;
}

/**
 * Implements hook_block_info().
 */
function ombublog_block_info() {
  $blocks['archive_list'] = array(
    'info' => t('OMBU Blog Archive list'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['tags_list'] = array(
    'info' => t('OMBU Blog Tags list'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['rss_feed'] = array(
    'info' => t('OMBU Blog RSS feed icon'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['search'] = array(
    'info' => t('OMBU Blog Search Form'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ombublog_block_view($delta = 0) {
  $block = array();

  switch ($delta) {
    case 'search':
      $block['content'] = drupal_get_form('ombublog_search_form');
      break;

    case 'archive_list':
      $block['subject'] = t('Archives');
      $block['content'] = _ombublog_block_get_archives_list();
      break;

    case 'tags_list':
      $block['subject'] = t('Categories');
      $block['content'] = _ombublog_block_get_tags_list();
      break;

    case 'rss_feed':
      $block['content'] = _ombublog_block_get_rss_feed();
      break;
  }

  return $block;
}

/**
 * Render a search form for the blog.
 */
function ombublog_search_form($form, &$form_state, $keys = '') {
  // Add CSS
  drupal_add_css(drupal_get_path('module', 'search') .'/search.css', 'module', 'all', FALSE);

  $form = array(
    '#action' => base_path() . OMBUBLOG_BASE_PATH . '/search',
    '#attributes' => array('class' => 'search-form'),
  );
  $form['basic']['inline'] = array('#prefix' => '<div class="container-inline">', '#suffix' => '</div>');
  $form['basic']['inline']['keys'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#default_value' => $keys,
    '#maxlength' => 255,
    '#size' => 30,
  );
  $form['basic']['inline']['keys']['#attributes']['placeholder'] = 'Keywords';
  // processed_keys is used to coordinate keyword passing between other forms
  // that hook into the basic search form.
  $form['basic']['inline']['processed_keys'] = array('#type' => 'value', '#value' => array());
  $form['basic']['inline']['submit'] = array('#type' => 'submit', '#value' => t('Search Blog'));

  return $form;
}

/**
 * Implements hook_form_alter().
 */
function ombublog_form_alter(&$form, $form_state, $form_id) {
  // Hide the path tab for blog posts.
  if ($form_id == 'blog_post_node_form') {
    $form['path']['#access'] = FALSE;
  }
}

/**
 * Implements hook_node_view().
 */
function ombublog_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'blog_post') {
    if ($view_mode != 'full') {
      // Build blog links.
      $links = array();

      // Add comment links.
      if (module_exists('comment')) {
        if ($node->comment_count == 0) {
          $links['comments'] = array(
            'title' => 'Leave a Comment',
            'href' => 'node/' . $node->nid,
            'fragment' => 'comments',
            'attributes' => array('class' => array('read-more')),
          );
        }
        else {
          $links['comments'] = array(
            'title' => 'Comments (' . $node->comment_count . ')',
            'href' => 'node/' . $node->nid,
            'fragment' => 'comments',
            'attributes' => array('class' => array('read-more')),
          );
        }
      }

      if ($links) {
        $node->content['links']['blog'] = array(
          '#theme' => 'links__node__blog',
          '#links' => $links,
          '#attributes' => array('class' => array('links', 'inline')),
        );
      }
    }
  }

  // Render taxonomy terms in a comma seprated list.
  if (isset($node->content['field_tags'])) {
    $node->content['field_tags']['#theme'] = 'taxonomy_comma_list';
  }

  // Don't show the link to "feature" this item.
  unset($node->content['links']['flag']);
  unset($node->content['links']['comment']);
}

/**
 * Implements hook_views_pre_render().
 */
function ombublog_views_pre_render(&$view) {
  // Add contextual title based on searched input.
  if ($view->name == 'ombublog' && $view->current_display == 'ombublog_listing') {
    $filters = array();

    // Anonymous function to help format taxonomy term inputs.
    $term_formatter = function($terms, $vocab) {
      $output = '';

      $items = array();
      foreach ($terms as $term) {
        $items[] = entity_label('taxonomy_term', $term);
      }

      if ($items) {
        $output = t('!vocab %items', array(
          '!vocab' => strtolower($vocab->name),
          '%items' => join(', ', $items),
        ));
      }

      return $output;
    };

    if (isset($view->exposed_input['category']) && $category = explode(',', $view->exposed_input['category'])) {
      $terms = taxonomy_term_load_multiple($category);
      $filters[] = $term_formatter($terms, taxonomy_vocabulary_machine_name_load(variable_get('ombublog_category_vocabulary', '')));
    }
    if (isset($view->exposed_input['keys']) && $keys = trim($view->exposed_input['keys'])) {
      $filters[] = t('keywords %keys', array(
        '%keys' => $keys,
      ));
    }
    if (isset($view->exposed_input['tags']) && $tags = explode(',', $view->exposed_input['tags'])) {
      $terms = array();
      foreach ($tags as $tag) {
        $term = taxonomy_get_term_by_name($tag);
        if ($term) {
          $terms[] = current($term)->tid;
        }
      }
      $terms = taxonomy_term_load_multiple($terms);
      $filters[] = $term_formatter($terms, taxonomy_vocabulary_machine_name_load(variable_get('ombublog_tags_vocabulary', '')));
    }
  }

  if ($filters) {
    $view->attachment_before .= t('<h3>Posts matching !filters</h3>', array(
      '!filters' => join(' and ', $filters),
    ));
  }
}

/**
 * Theme callback.
 *
 * Renders a list of taxonomy terms in a comma seprated list.
 */
function theme_taxonomy_comma_list($variables) {
  if (!isset($variables['element']['#items'])) {
    return;
  }

  // Pass variables through field preprocessing, since this isn't actually a
  // field theme function.
  template_preprocess_field($variables, '');
  template_process_field($variables, '');

  $output = '';

  // Render the label, if it's not hidden.
  if (!$variables['label_hidden']) {
    $output .= '<div class="field-label"' . $variables['title_attributes'] . '>' . $variables['label'] . ':&nbsp;</div>';
  }

  // Build links array.
  $links = array();
  foreach ($variables['items'] as $delta => $item) {
    $links[] = drupal_render($item);
  }

  $output .= implode('<span>, </span>', $links);

  // Render the top-level DIV.
  $output = '<div class="' . $variables['classes'] . '"' . $variables['attributes'] . '>' . $output . '</div>';

  return $output;
}

function _ombublog_get_blog_list() {
  $query = db_select('taxonomy_term_data', 't');
  $query->join('taxonomy_vocabulary', 'v', 't.vid = v.vid');
  $query->fields('t', array('tid', 'name'));
  $query->condition('v.machine_name', variable_get('ombublog_category_vocabulary', ''), '=');
  $result = $query->execute();
  $data = array();
  while ($record = $result->fetchAssoc()) {
    $data[$record['tid']] = ombublog_url_safe_string($record['name']);
  }
  return $data;
}

/**
 * Block function for the archives list.
 */
function _ombublog_block_get_archives_list() {
  $tid = _ombublog_get_current_blog_tid();
  $query = <<<QUERY
SELECT DISTINCT
YEAR(FROM_UNIXTIME(n.created)) as year,
MONTH(FROM_UNIXTIME(n.created)) as month
FROM {node} n
LEFT JOIN {field_data_field_blog} fdfb ON n.nid = fdfb.entity_id
WHERE
fdfb.field_blog_tid = :tid AND
n.type = :type AND
n.status <> 0
ORDER BY
year DESC,
month DESC
QUERY;

  $content = array();
  $results = db_query($query, array(':type' => 'blog_post', ':tid' => $tid));
  while ($r = $results->fetchAssoc()) {
    $text = date("F Y", mktime(0, 0, 0, $r['month'], date("d"), $r['year']));

    $content[] = l($text, ombublog_get_base_url() . '/' . $r['year'] . sprintf('%02d', $r['month']));
  }

  if (count($content)) {
    return '<div class="item-list"><ul><li>' . implode('</li><li>', $content) . '</li></ul></div>';
  }
  else {
    return '';
  }
}

function _ombublog_block_get_tags_list() {
  $blogs_tid = _ombublog_get_current_blog_tid();

  $query = <<<QUERY
SELECT
    count(*) AS count,
    ttd.name AS title,
    ttd.tid AS tid
FROM {node} n
LEFT JOIN {field_data_field_blog} fdfb ON n.nid = fdfb.entity_id
LEFT JOIN {field_data_field_tags} fdft ON n.nid = fdft.entity_id
LEFT JOIN {taxonomy_term_data} ttd ON fdft.field_tags_tid = ttd.tid
WHERE fdfb.field_blog_tid = :blogs_tid
AND fdft.field_tags_tid IS NOT NULL
GROUP BY fdft.field_tags_tid
HAVING count > 0
QUERY;

  $links = array();
  $results = db_query($query, array(':blogs_tid' => $blogs_tid));
  foreach ($results as $row) {
    $links[] = array(
      'title' => $row->title . ' (' . $row->count . ')',
      'href' => ombublog_get_base_url() . '/tags/' . $row->tid . '/' . ombublog_url_safe_string($row->title),
      'term' => $row,
    );
  }

  $content = array(
    '#theme' => 'links',
    '#links' => $links,
  );

  return $content;
}

function _ombublog_block_get_rss_feed() {
  return l(t('RSS'), ombublog_get_base_url() . '/feed', array(
    'attributes' => array(
      'class' => 'rss-icon',
      'title' => 'RSS Feed',
    ),
  ));
}

function ombublog_url_safe_string($string) {
  $string = strtr(drupal_strtolower($string), array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));
  $string = preg_replace('/[^A-Za-z0-9\-_]/', '', $string);
  $string = preg_replace('/\-+/', '-', $string);
  return $string;
}
