<?php

/**
 * @file
 * OMBU Blog Module
 *
 * Provides single-blog functionality for a drupal site. Features include:
 *   - Tags, tagging via taxonomy
 *   - Blog-only search
 */

include_once 'ombublog.features.inc';

/**
 * Constants
 */

/**
 * Base url stem for blog functionality
 */
define('OMBUBLOG_BASE_PATH', 'blog/');

/**
 * Module Hooks
 */

function ombublog_base_path() {
  return variable_get('ombublog_base_path', OMBUBLOG_BASE_PATH);
}

/**
 * Implements hook_init().
 */
function ombublog_init() {
  // Redirect taxonomy terms managed by ombublog.
  $item = menu_get_item();
  if ($item['path'] == 'taxonomy/term/%' && $term = menu_get_object('taxonomy_term', 2)) {
    if ($term->vocabulary_machine_name == variable_get('ombublog_category_vocabulary', '') && variable_get('ombublog_category_redirect', 0)) {
      drupal_goto(ombublog_base_path() . 'search', array(
        'query' => array(
          'category' => $term->tid,
        ),
      ), 301);
    }
    if ($term->vocabulary_machine_name == variable_get('ombublog_tags_vocabulary', '') && variable_get('ombublog_tags_redirect', 1)) {
      drupal_goto(ombublog_base_path() . 'search', array(
        'query' => array(
          'tags' => array($term->tid),
        ),
      ), 301);
    }
  }
}

/**
 * Implements hook_menu().
 */
function ombublog_menu() {
  $items = array();

  $items['admin/config/user-interface/ombublog'] = array(
    'title' => 'Ombu Blog',
    'description' => 'Configuration for sitewide blog',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ombublog_settings_form'),
    'access arguments' => array('administer ombublogs'),
    'file' => 'ombublog.admin.inc',
  );

  $items[ombublog_base_path() . 'author/autocomplete'] = array(
    'title' => 'Blog author autocomplete',
    'page callback' => 'ombublog_author_autocomplete',
    'access arguments' => array('access contnet'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function ombublog_admin_paths() {
  $paths = array();

  // Make sure that blog author profiles are treated like content.
  $type = profile2_type_load('blog_author');
  if ($type) {
    $path = profile2_page_get_base_path($type);
    $paths = array(
      $path . '/*/edit' => TRUE,
      $path . '/*/delete' => TRUE,
    );
  }

  return $paths;
}

/**
 * Implements hook_bean_types_api_info().
 */
function ombublog_bean_types_api_info() {
  return array(
    'api' => bean_current_version(),
  );
}

/**
 * Implements hook_bean_types().
 */
function ombublog_bean_types() {
  $plugins = array();

  $plugins['ombublog_list'] = array(
    'name' => 'ombublog_list',
    'label' => t('Latest blog posts'),
    'handler' => array(
      'class' => 'OmbublogList',
      'parent' => 'bean_default',
    ),
    'path' => drupal_get_path('module', 'ombublog') . '/includes',
    'file' => 'OmbublogList.php',
    'editable' => TRUE,
  );

  $plugins['ombublog_tags'] = array(
    'name' => 'ombublog_tags',
    'label' => t('Blog tag cloud'),
    'handler' => array(
      'class' => 'OmbublogTags',
      'parent' => 'bean_default',
    ),
    'path' => drupal_get_path('module', 'ombublog') . '/includes',
    'file' => 'OmbublogTags.php',
    'editable' => TRUE,
  );

  return $plugins;
}

/**
 * Implements hook_bean_style_info().
 */
function ombublog_bean_style_info() {
  return array(
    'ombublog_list' => array(
      'label' => 'Teaser listing',
      'class' => 'OmbublogListStyle',
      'bean_types' => array(
        'ombublog_list',
      ),
    ),
  );
}

/**
 * Implements hook_bean_style_options_alter().
 */
function ombublog_bean_style_options_alter(&$options, $context) {
  if ($context['bundle'] == 'ombublog_list') {
    unset($options['']);
  }
}

/**
 * Implements hook_node_info().
 */
function ombublog_node_info() {
  $items = array(
    'blog_post' => array(
      'name' => t('Blog Post'),
      'base' => 'node_content',
      'description' => t('A post in the blog area.'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function ombublog_theme() {
  return array(
    'ombublog_archive_list' => array(
      'variables' => array('options' => array()),
    ),
  );
}

/**
 * Implements hook_permissions().
 */
function ombublog_permissions() {
  return array(
    'administer ombublogs' => array(
      'title' => t('Administer Blogs'),
    ),
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function ombublog_module_implements_alter(&$implementations, $hook) {
  if (in_array($hook, array('profile2_type_load'))) {
    $group = $implementations['ombublog'];
    unset($implementations['ombublog']);
    $implementations['ombublog'] = $group;
  }
}

/**
 * Implements hook_image_default_styles().
 */
function ombublog_image_default_styles() {
  $styles = array();

  $styles['blog_teaser'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 251, 'height' => 134, 'upscale' => 0),
        'weight' => 0,
      ),
    ),
  );

  $styles['blog_post'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 408, 'height' => 300, 'upscale' => 0),
        'weight' => 0,
      ),
    ),
  );

  $styles['blog_image_open_graph'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop_center',
        'data' => array('width' => 860, 'height' => 450),
        'weight' => 0,
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_block_info().
 */
function ombublog_block_info() {
  $blocks['archive_list'] = array(
    'info' => t('OMBU Blog Archive list'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['tags_list'] = array(
    'info' => t('OMBU Blog Tags list'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['rss_feed'] = array(
    'info' => t('OMBU Blog RSS feed icon'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['search'] = array(
    'info' => t('OMBU Blog Search Form'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ombublog_block_view($delta = 0) {
  $block = array();

  switch ($delta) {
    case 'search':
      $block['content'] = drupal_get_form('ombublog_search_form');
      break;

    case 'archive_list':
      $block['subject'] = t('Archives');
      $block['content'] = ombublog_archive_block();
      break;

    case 'tags_list':
      $block['subject'] = t('Categories');
      $block['content'] = _ombublog_block_get_tags_list();
      break;

    case 'rss_feed':
      $block['content'] = _ombublog_block_get_rss_feed();
      break;
  }

  return $block;
}

/**
 * Render a search form for the blog.
 */
function ombublog_search_form($form, &$form_state, $keys = '') {
  // Add CSS
  drupal_add_css(drupal_get_path('module', 'search') .'/search.css', 'module', 'all', FALSE);

  $form = array(
    '#attributes' => array('class' => 'search-form'),
  );
  $form['basic']['inline'] = array('#prefix' => '<div class="container-inline">', '#suffix' => '</div>');
  $form['basic']['inline']['keys'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#default_value' => $keys,
    '#maxlength' => 255,
    '#size' => 30,
  );
  $form['basic']['inline']['keys']['#attributes']['placeholder'] = 'Search the blog';

  // Processed_keys is used to coordinate keyword passing between other forms
  // that hook into the basic search form.
  $form['basic']['inline']['processed_keys'] = array('#type' => 'value', '#value' => array());

  $form['basic']['inline']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search Blog',
  );

  return $form;
}

/**
 * Submit handler for search form.
 */
function ombublog_search_form_submit($form, &$form_state) {
  $form_state['redirect'] = array(
    ombublog_base_path() . 'search',
    array(
      'query' => array(
        'keys' => $form_state['values']['keys'],
      ),
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function ombublog_entity_info_alter(&$entity_info) {
  // Alter label callback for blog authors in order to show display name as
  // title.
  $entity_info['profile2']['label callback'] = 'ombublog_profile2_label';
}

/**
 * Label callback for blog author profile.
 *
 * Shows display name as label instead of "Blog author".
 */
function ombublog_profile2_label($profile) {
  if ($profile->type == 'blog_author') {
    $display_name = field_get_items('profile2', $profile, 'field_display_name');
    if ($display_name) {
      return $display_name[0]['value'];
    }
  }

  return $profile->defaultLabel();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ombublog_form_views_exposed_form_alter(&$form, $form_state) {
  if ($form_state['view']->name == 'ombublog' && $form_state['view']->current_display == 'ombublog_listing') {
    if (isset($form['field_authors_target_id'])) {
      $pids = db_query("SELECT pid FROM {profile} WHERE type = :type", array(
        ':type' => 'blog_author',
      ))->fetchCol();
      $profiles = profile2_load_multiple($pids);
      if ($profiles) {
        // Get last name and pid of each user.
        foreach ($profiles as $profile) {
          $wrapper = entity_metadata_wrapper('profile2', $profile);
          $options[$profile->pid] = $wrapper->field_last_name->value();
        }
        // Sort based on value which is last name.
        asort($options);
        // Run back through options after alphabetical sort by last name and
        // give each option full name.
        foreach ($options as $key => $value) {
          $options[$key] = entity_label('profile2', $profiles[$key]);
        }
        $form['field_authors_target_id'] = array(
          '#type' => 'select',
          '#options' => array('' => t('- Any -')) + $options,
          '#default_value' => $form['field_authors_target_id']['#default_value'],
        );
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function ombublog_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'blog_post') {
    switch ($view_mode) {
      case 'full':
        // Add open graph tags.
        $tags['og:title'] = $node->title;
        $tags['og:type'] = 'blog';
        $tags['og:url'] = url('node/' . $node->nid, array('absolute' => TRUE));
        $tags['article:published_time'] = date('c', $node->created);

        $wrapper = entity_metadata_wrapper('node', $node);

        $body = $wrapper->body->value();
        if (isset($body)) {
          $tags['og:description'] = strip_tags($wrapper->body->summary->value());
        }

        if (!empty($wrapper->field_image)) {
          $image = $wrapper->field_image->value();
          $tags['og:image'] = image_style_url('blog_image_open_graph', $image['uri']);
        }

        if (!empty($wrapper->field_authors)) {
          $authors = array();
          foreach ($wrapper->field_authors as $author) {
            $authors[] = entity_label('profile2', $author->value());
          }

          if (count($authors) > 1) {
            $authors[] = 'and ' . array_pop($authors);
          }
          $authors = count($authors) > 2 ? implode(', ', $authors) : implode(' ', $authors);
        }
        else {
          $authors = $node->name;
        }
        $tags['article:author'] = $authors;

        foreach ($tags as $tag => $data) {
          drupal_add_html_head(array(
            '#tag' => 'meta',
            '#attributes' => array(
              'property' => $tag,
              'content' => $data,
            ),
          ), $tag);
        }

        break;

      case 'rss':
        // Add read more link for rss feeds.
        $link = array(
          'title' => t('Continue reading !title »', array(
            '!title' => $node->title,
          )),
          'href' => 'node/' . $node->nid,
        );

        $node->content['links']['node']['#links']['node'] = $link;
        break;

      default:
        // Build blog links.
        $links = array();

        // Add comment links.
        if (module_exists('comment')) {
          if ($node->comment_count == 0) {
            $links['comments'] = array(
              'title' => 'Leave a Comment',
              'href' => 'node/' . $node->nid,
              'fragment' => 'comments',
              'attributes' => array('class' => array('read-more')),
            );
          }
          else {
            $links['comments'] = array(
              'title' => 'Comments (' . $node->comment_count . ')',
              'href' => 'node/' . $node->nid,
              'fragment' => 'comments',
              'attributes' => array('class' => array('read-more')),
            );
          }
        }

        if ($links) {
          $node->content['links']['blog'] = array(
            '#theme' => 'links__node__blog',
            '#links' => $links,
            '#attributes' => array('class' => array('links', 'inline')),
          );
        }
        break;
    }
  }

  // Don't show the link to "feature" this item.
  unset($node->content['links']['flag']);
  unset($node->content['links']['comment']);
}

/**
 * Implements hook_preprocess_node().
 */
function ombublog_preprocess_node(&$variables) {
  // Add schema.org microdata to blog posts.
  if ($variables['type'] == 'blog_post') {
    $variables['attributes_array']['infoscope'] = '';
    $variables['attributes_array']['itemtype'] = 'http://schema.org/BlogPosting';
    $variables['title_attributes_array']['itemprop'] = 'name';
  }
}

/**
 * Implements hook_entity_view().
 */
function ombublog_entity_view($entity, $type, $view_mode) {
  if ($type == 'profile2' && $entity->type == 'blog_author' && $view_mode == 'page') {
    // Add listing of all blog posts by this author.
    $query = db_select('node', 'n')->extend('PagerDefault');
    $query->join('field_data_field_authors', 'fa', 'n.nid = fa.entity_id AND fa.deleted = 0');

    $query
      ->fields('n', array('nid'))
      ->condition(db_or()->condition('n.uid', $entity->uid)->condition('fa.field_authors_target_id', $entity->uid))
      ->orderBy('n.created', 'DESC');

    $nids = $query->execute()->fetchCol();

    if ($nids) {
      $nodes = node_load_multiple($nids);
      $entity->content['blog_posts'] = array(
        '#weight' => 100,
        'nodes' => node_view_multiple($nodes, variable_get('ombublog_author_node_view', 'teaser')),
        'pager' => array(
          '#theme' => 'pager',
        ),
      );
    }
  }
}

/**
 * Implements hook_profile2_type_load().
 */
function ombublog_profile2_type_load($types) {
  // Ensure that blog author profile types are accessible from user screens.
  if (isset($types['blog_author'])) {
    $types['blog_author']->userCategory = TRUE;
  }
}

/**
 * Implements hook_user_view().
 */
function ombublog_user_view($account, $view_mode, $langcode) {
  if ($profile = profile2_load_by_user($account)) {
    $profile_type = profile2_type_load('blog_author');
    $account->content['summary']['blog_author_profile'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Blog author'),
      '#markup' => l(t('View blog author profile'), profile2_page_get_base_path($profile_type) . '/' . $account->uid),
      '#weight' => 10,
    );
  }
}

/**
 * Implements hook_views_post_execute().
 */
function ombublog_views_post_execute(&$view) {
  // Add contextual title based on searched input.
  if ($view->name == 'ombublog' && $view->current_display == 'ombublog_listing') {
    $filters = array();

    $input = $view->exposed_input;

    // Anonymous function to format a filter link.
    $filter_link_formatter = function($label, $query) {
      return l($label . '&nbsp;<strong class="remove-filter"><span></span></strong>', current_path(), array(
        'query' => $query,
        'html' => TRUE,
        'attributes' => array(
          'class' => array('filter-active'),
          'title' => t('Click to remove filter'),
        ),
      ));
    };

    // Anonymous function to help format taxonomy term inputs.
    $term_formatter = function($key, $terms) use($input, $filter_link_formatter) {
      $output = '';

      $items = array();
      foreach ($terms as $term) {
        // Clone input in order to provide a link to remove filter.
        $query = $input;
        if (is_array($query[$key])) {
          unset($query[$key][array_search($term->tid, $query[$key])]);
        }
        else {
          unset($query[$key]);
        }

        $items[] = $filter_link_formatter(entity_label('taxonomy_term', $term), $query);
      }

      if ($items) {
        return implode(', ', $items);
      }

      return $output;
    };

    if (!empty($input['field_authors_target_id'])) {
      $profile = profile2_load($input['field_authors_target_id']);
      if ($profile) {
        $query = $input;
        unset($query['field_authors_target_id']);
        $filters[] = t('by !author', array(
          '!author' => $filter_link_formatter(entity_label('profile2', $profile), $query),
        ));
      }
    }

    $vocab = taxonomy_vocabulary_machine_name_load(variable_get('ombublog_category_vocabulary', ''));
    if (!empty($input['category']) && $input['category'] != 'All' && $category = explode(',', $input['category'])) {
      $terms = taxonomy_term_load_multiple($category);
      $filters[] = t('in !channel', array(
        '!channel' => $term_formatter('category', $terms, $vocab),
      ));
    }

    if (!empty($input['keys']) && $keys = trim($input['keys'])) {
      $query = $input;
      unset($query['keys']);
      $filters[] = t('containing !link', array(
        '!link' => $filter_link_formatter('<span>"</span>' . $keys . '<span>"</span>', $query),
      ));
    }

    $vocab = taxonomy_vocabulary_machine_name_load(variable_get('ombublog_tags_vocabulary', ''));
    if (!empty($input['tags'])) {
      $terms = array();
      foreach ($input['tags'] as $tag) {
        $term = taxonomy_term_load($tag);
        if ($term) {
          $terms[$term->tid] = $term;
        }
      }
      $filters[] = t('tagged !terms', array(
        '!terms' => $term_formatter('tags', $terms, $vocab),
      ));
    }

    if (!empty($filters)) {
      if (count($filters) > 1) {
        $filters[] = ' <span>and</span> ' . array_pop($filters);
      }

      $view->set_title(t('<h3>Articles !filters</h3>', array(
        '!filters' => count($filters) > 2 ? implode(', ', $filters) : implode(' ', $filters),
      )));
    }
  }
}

/**
 * Block function for the archives list.
 */
function ombublog_archive_block() {
  $year = 'YEAR(FROM_UNIXTIME(n.created))';
  $month = 'MONTH(FROM_UNIXTIME(n.created))';
  $query = <<<QUERY
SELECT
CONCAT(
  $year,
  '-',
  $month
) AS date,
COUNT(*) AS count
FROM {node} n
WHERE
n.type = :type AND
n.status <> 0
GROUP BY $year, $month
ORDER BY
$year DESC,
$month DESC
QUERY;
  $results = db_query($query, array(':type' => 'blog_post'))->fetchAllKeyed();

  // Build up a list of options for all available months between first post and
  // now.
  $start_date = db_query('SELECT MIN(created) FROM {node} WHERE type = :type', array(
    ':type' => 'blog_post',
  ))->fetchField();
  $current_date = time();
  while ($start_date < $current_date) {
    $key = date('Y-m', $start_date);
    $key_search = date('Y-n', $start_date);
    $options[date('Y', $start_date)][$key] = array(
      '!month' => date('F', $start_date),
      '!count' => isset($results[$key_search]) ? $results[$key_search] : 0,
    );
    $start_date = strtotime(date('m/d/Y', $start_date) . ' + 1 month');
  }

  foreach ($options as $key => $option) {
    $options[$key] = array_reverse($option, TRUE);
  }
  $options = array_reverse($options, TRUE);

  return array(
    '#theme' => 'ombublog_archive_list',
    '#options' => $options,
  );
}

/**
 * Theme callback for archive list.
 *
 * Defaults to select list with optgroups. An option for each month will be
 * created, and if there are no blog posts in that month the option will be
 * disabled.
 */
function theme_ombublog_archive_list($variables) {
  // Build up select list. Can't use theme_select() since there's no support for
  // disabling options, which is needed for options without blog posts.
  $output = '<select name="blog-archive">';
  $output .= '<option value="">Select a Date</option>';
  foreach ($variables['options'] as $year => $months) {
    $output .= '<optgroup label="' . $year . '">';

    foreach ($months as $key => $month) {
      $output .= t('<option value="!key" !disabled>!month (!count)</option>', array(
        '!key' => $key,
        '!disabled' => $month['!count'] ? '' : 'disabled="disabled"',
      ) + $month);
    }

    $output .= '</optgroup>';
  }
  $output .= '</select>';

  return $output;
}

function _ombublog_block_get_rss_feed() {
  return l(t('RSS'), ombublog_get_base_url() . '/feed', array(
    'attributes' => array(
      'class' => 'rss-icon',
      'title' => 'RSS Feed',
    ),
  ));
}

function ombublog_url_safe_string($string) {
  $string = strtr(drupal_strtolower($string), array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));
  $string = preg_replace('/[^A-Za-z0-9\-_]/', '', $string);
  $string = preg_replace('/\-+/', '-', $string);
  return $string;
}

/**
 * Autocomplete callback for blog authors.
 */
function ombublog_author_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $result = db_select('users')->fields('users', array('name'))->condition('name', db_like($string) . '%', 'LIKE')->range(0, 10)->execute();
    foreach ($result as $user) {
      $matches[$user->name] = check_plain($user->name);
    }
  }

  drupal_json_output($matches);
}
